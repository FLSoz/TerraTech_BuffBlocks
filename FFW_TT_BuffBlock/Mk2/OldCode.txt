////////////////////////

TankBlock prefab = ManSpawn.inst.GetBlockPrefab((BlockTypes)block.visible.ItemType);

                object tgtPrefab = prefab.GetComponent(this.effectComponent);

                List<object> lastIterObjsPrefab = null;
                List<object> thisIterObjsPrefab = new List<object> { tgtPrefab };

                FieldInfo field_lastIterPrefab = null;
                FieldInfo field_thisIterPrefab = null;

                foreach (string e in splitPath)
                {
                    field_lastIterPrefab = field_thisIterPrefab;
                    lastIterObjsPrefab = new List<object>(thisIterObjsPrefab);
                    thisIterObjsPrefab = new List<object>();
                    foreach (object obj in lastIterObjsPrefab)
                    {
                        Console.WriteLine("FFW! Manipulate Marker 1p " + e);
                        field_thisIterPrefab = obj.GetType().GetField(e, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                        if (field_thisIterPrefab != null)
                        {
                            object value_thisIterPrefab = field_thisIterPrefab.GetValue(obj);
                            var arrayTest = value_thisIterPrefab as Array;
                            var listTest = value_thisIterPrefab as System.Collections.IList;
                            Boolean isStruct = value_thisIterPrefab.GetType().IsValueType && !value_thisIterPrefab.GetType().IsPrimitive;
                            Console.WriteLine("FFW! Manipulate Marker 2p");
                            if (arrayTest != null)
                            {
                                Array value_thisIterCasted = (Array)value_thisIterPrefab;
                                foreach (object element in value_thisIterCasted)
                                {
                                    thisIterObjsPrefab.Add(element);
                                }
                            }
                            else if (listTest != null)
                            {
                                System.Collections.IList value_thisIterPrefabCasted = (System.Collections.IList)value_thisIterPrefab;
                                foreach (object element in value_thisIterPrefabCasted)
                                {
                                    thisIterObjsPrefab.Add(element);
                                }
                            }
                            else
                            {
                                thisIterObjsPrefab.Add(value_thisIterPrefab);
                            }
                        }
                    }
                }
				///////////////////////////////
				/*Console.WriteLine("FFW: RemoveBuff Start");
            for (int i = 0; i < buff.m_BuffComponent.Length; i++)
            {
                Console.WriteLine("FFW: RemoveBuff 1");
                string componentString = buff.m_BuffComponent[i];
                string path = buff.m_BuffPath[i];
                Type component = typeof(TankBlock).Assembly.GetType(componentString);
                if (component != null)
                {
                    Console.WriteLine("FFW: RemoveBuff 2");
                    if (this.typeToBuff.ContainsKey(component)) // Remove from typeToBuff
                    {
                        Console.WriteLine("FFW: RemoveBuff 3");
                        this.typeToBuff[component].Remove(buff);
                        this.pathToSegment[path].ManipulateObj(this.typeToBlock[component], "UPDATE");
                        if (this.typeToBuff[component].Count <= 0)
                        {
                            Console.WriteLine("FFW: RemoveBuff 4");
                            this.typeToBuff.Remove(component);
                            Console.WriteLine("FFW: RemoveBuff 5");
                            this.typeToBlock.Remove(component);
                        }
                    }
                    if (this.pathToSegment.ContainsKey(path))
                    {
                        Console.WriteLine("FFW: RemoveBuff 6");
                        this.pathToSegment[path].RemoveBuff(buff);
                        Console.WriteLine("FFW: RemoveBuff 7");
                        // UPDATE ALL BLOCKS IN typeToBlock[component] IF >0
                        // CLEAN ALL BLOCKS IN typeToBlock[component] IF <=0
                        if (this.pathToSegment[path].effectBuffBlocks.Count <= 0)
                        {
                            Console.WriteLine("FFW: RemoveBuff 8");
                            this.pathToSegment[path].ManipulateObj(this.typeToBlock[component], "CLEAN");
                            this.pathToSegment.Remove(path);
                        }
                        else
                        {
                            Console.WriteLine("FFW: RemoveBuff 9");
                            this.pathToSegment[path].ManipulateObj(this.typeToBlock[component], "UPDATE");
                        }
                    }
                }
            }*/
			//////////////////////////////

			/*Console.WriteLine("FFW: AddBuff Start");
            for (int i = 0; i < buff.m_BuffComponent.Length; i++)
            {
                Console.WriteLine("FFW: AddBuff 1");
                string componentString = buff.m_BuffComponent[i];
                string path = buff.m_BuffPath[i];
                Type component = typeof(TankBlock).Assembly.GetType(componentString);
                if (component != null)
                {
                    Console.WriteLine("FFW: AddBuff 2");
                    if (this.pathToSegment.ContainsKey(path)) // Add into pathToSegment
                    {
                        Console.WriteLine("FFW: AddBuff 3");
                        this.pathToSegment[path].AddBuff(buff, i);
                    }
                    else // Create new pathToSegment
                    {
                        Console.WriteLine("FFW: AddBuff 4");
                        BuffSegmentMk2 segment = new BuffSegmentMk2()
                        {
                            tank = this.tank,
                            controller = this,
                            effectComponent = component,
                            effectPath = path
                        };
                        Console.WriteLine("FFW: AddBuff 5");
                        this.pathToSegment.Add(path, segment);
                        segment.AddBuff(buff, i);
                    }


                    Console.WriteLine("FFW: AddBuff 6");
                    if (this.typeToBuff.ContainsKey(component)) // Add into typeToBuff...
                    {
                        Console.WriteLine("FFW: AddBuff 7");
                        this.typeToBuff[component].Add(buff);
                        // UPDATE ALL BLOCKS IN typeToBlock[component]
                        this.pathToSegment[path].ManipulateObj(this.typeToBlock[component], "UPDATE");
                    }
                    else // Create new typeToBuff and typeToBlock
                    {
                        Console.WriteLine("FFW: AddBuff 8");
                        this.typeToBuff.Add(component, new List<ModuleBuffMk2>());
                        Console.WriteLine("FFW: AddBuff 9");
                        this.typeToBuff[component].Add(buff);
                        Console.WriteLine("FFW: AddBuff 10");
                        this.typeToBlock.Add(component, new List<TankBlock>());
                        Console.WriteLine("FFW: AddBuff 11");
                        // SAVE ALL BLOCKS IN typeToBlock[component]
                        foreach (TankBlock block in this.allBlocks)
                        {
                            Console.WriteLine("FFW: AddBuff 12");
                            object blockComponent = block.GetComponent(component);
                            if (blockComponent != null)
                            {
                                Console.WriteLine("FFW: AddBuff 12");
                                this.typeToBlock[component].Add(block);
                            }
                        }
                        Console.WriteLine("FFW: AddBuff 13");
                        this.pathToSegment[path].ManipulateObj(this.typeToBlock[component], "SAVE");
                    }
                }



            }
            Console.WriteLine("FFW: AddBuff End");*/
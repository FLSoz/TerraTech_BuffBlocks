use harmony... 


CHANGE
public class ModuleWeapon
{
	private void OnAttach()
	{
		base.block.tank.BlockStateController.AddWeapon(this)
	}
	private void OnDetach()
	{
		base.block.tank.BlockStateController.RemoveWeapon(this)
	}
	public float ShotCooldown
	{
		get
		{
			return this.m_ShotCooldown*this.ffw_ShotCooldownMult;
		}
	}
	public float ffw_ShotCooldownMult = 1f;
}

public class TechBlockStateController
{
	public float ffw_ShotCooldownMult
	{
		get
		{
			if (this.m_WeaponModules.Count > 0)
			{
				return this.m_WeaponModules[0].ffw_ShotCooldownMult ;
			}
			return 1f;
		}
		set
		{
			foreach (ModuleWeapon moduleWeapon in this.m_WeaponModules)
			{
				moduleWeapon.ffw_ShotCooldownMult = value;
			}
		}
	}
	public void DeregisterKillSwitch(BlockControllerModuleTypes module)
	{
		if (this.m_RegisteredKillSwitches[(int)module] == 0)
		{
			if (module == BlockControllerModuleTypes.Weapon)
			{
				this.RateOfFireMult = 1f;
				return;
			}
		}
	}
	public void AddWeapon(ModuleWeapon weapon)
	{
		this.m_WeaponModules.Add(weapon);
	}

	public void Removeweapon(ModuleWeapon weapon)
	{
		this.m_WeaponModules.Remove(weapon);
	}
	private List<ModuleWeapon> m_WeaponModules = new List<<ModuleWeapon>();
}

public enum BlockControllerModuleTypes
{
	...
	Weapon
}

< module >
	reference list of affected blocks, ffw_AffectedBlocks
	< On Attach >
		< Find all blocks with ModuleWeapon on tech >
			< Set ffw_ShotCooldownMult to 0.5f >
			< Store block reference into ffw_AffectedBlocks >
	
	< On Detach >
		< Find all blocks in ffw_AffectedBlocks >
			< Set ffw_ShotCooldownMult to 1f >
		< Clean ffw_AffectedBlocks >

